package boot

import (
	boot "github.com/flipped-aurora/gf-vue-admin/boot/gorm"
	"github.com/flipped-aurora/gf-vue-admin/interfaces"
	"github.com/flipped-aurora/gf-vue-admin/library/global"
	"go.uber.org/zap"
	"gorm.io/gorm"
	"os"
)

var Gorm = new(_gorm)

type _gorm struct {
	db  *gorm.DB
	err error
}

func (g *_gorm) Initialize(i interfaces.Gorm) {
	resolver := i.GetResolver()
	g.db, g.err = gorm.Open(i.GetGormDialector(), boot.Gorm.GenerateConfig())
	if g.err != nil {
		zap.L().Error("gorm链接数据库失败!", zap.Error(g.err))
		os.Exit(0)
	}
	g.err = global.Db.Use(resolver)
	if g.err != nil {
		zap.L().Error("gorm链接集群失败!", zap.Error(g.err))
		os.Exit(0)
	}
	if global.Config.Gorm.AutoMigrate {
		// todo casbin_rule 表
		g.err = global.Db.AutoMigrate(
		// Code generated by gin-vue-admin Begin; DO NOT EDIT.
		// Code generated by gin-vue-admin End; DO NOT EDIT.
		)
		if g.err != nil {
			zap.L().Error("gorm注册表失败!", zap.Error(g.err))
			os.Exit(0)
		}
		zap.L().Info("gorm注册表成功!")
	}
	sql, _err := g.db.DB()
	if _err != nil {
		zap.L().Error("gorm设置数据库最大连接数失败!", zap.Error(_err))
		return
	}
	sql.SetMaxIdleConns(global.Config.Gorm.GetMaxIdleConnes())
	sql.SetMaxOpenConns(global.Config.Gorm.GetMaxOpenConnes())
}
